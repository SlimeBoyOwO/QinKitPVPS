package org.NoiQing.EventListener.Temp;

import org.NoiQing.QinKitPVPS;
import org.NoiQing.util.Function;
import org.bukkit.Color;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.scheduler.BukkitRunnable;

public class BirthDayListener implements Listener {
    String content = """
            0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            0011110000001111000011111111110000111111111111000011111111111100001111000000001111000000000011111111111100001111001111111111110000111111111111111100111100000011110011111111111100000011111111110000111100000000111100
            0011110000001111000011111111110000111111111111000011111111111100001111000000001111000000000011111111111100001111001111111111110000111111111111111100111100000011110011111111111100000011111111110000111100000000111100
            0011110000001111001111000000111100111100000011110011110000001111000011110000111100000000000011110000001111001111001111000000111100000000111100000000111100000011110011110000001111001111000000111100001111000011110000
            0011110000001111001111000000111100111100000011110011110000001111000011110000111100000000000011110000001111001111001111000000111100000000111100000000111100000011110011110000001111001111000000111100001111000011110000
            0011111111111111001111111111111100111111111111000011111111111100000000111111110000000000000011111111111100001111001111111111110000000000111100000000111111111111110011110000001111001111111111111100000011111111000000
            0011111111111111001111111111111100111111111111000011111111111100000000111111110000000000000011111111111100001111001111111111110000000000111100000000111111111111110011110000001111001111111111111100000011111111000000
            0011110000001111001111000000111100111100000000000011110000000000000000001111000000000000000011110000001111001111001111000000111100000000111100000000111100000011110011110000001111001111000000111100000000111100000000
            0011110000001111001111000000111100111100000000000011110000000000000000001111000000000000000011110000001111001111001111000000111100000000111100000000111100000011110011110000001111001111000000111100000000111100000000
            0011110000001111001111000000111100111100000000000011110000000000000000001111000000000000000011111111111100001111001111000000111100000000111100000000111100000011110011111111111100001111000000111100000000111100000000
            0011110000001111001111000000111100111100000000000011110000000000000000001111000000000000000011111111111100001111001111000000111100000000111100000000111100000011110011111111111100001111000000111100000000111100000000
            0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            """;
    String name = """
            0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            0011111111111111001111110000000011111100111111111111110011111111111100001111111111110000111100000000111100111111111111000011111111111111001111111111111111000011111111110000
            0011111111111111001111110000000011111100111111111111110011111111111100001111111111110000111100000000111100111111111111000011111111111111001111111111111111000011111111110000
            0011110000000000001111111100001111111100111100000000000011110000001111001111000000111100001111000011110000111100000011110011110000000000000000001111000000001111000000111100
            0011110000000000001111111100001111111100111100000000000011110000001111001111000000111100001111000011110000111100000011110011110000000000000000001111000000001111000000111100
            0011111111111111001111001111111100111100111111111100000011111111111100001111111111110000000011111111000000111111111111000011111111110000000000001111000000001111111111111100
            0011111111111111001111001111111100111100111111111100000011111111111100001111111111110000000011111111000000111111111111000011111111110000000000001111000000001111111111111100
            0000000000001111001111000011110000111100111100000000000011110000001111001111000000111100000000111100000000111100000011110011110000000000000000001111000000001111000000111100
            0000000000001111001111000011110000111100111100000000000011110000001111001111000000111100000000111100000000111100000011110011110000000000000000001111000000001111000000111100
            0011111111111111001111000000000000111100111111111111110011110000001111001111000000111100000000111100000000111111111111000011111111111111000000001111000000001111000000111100
            0011111111111111001111000000000000111100111111111111110011110000001111001111000000111100000000111100000000111111111111000011111111111111000000001111000000001111000000111100
            0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            """;

    String cup = """
            0000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000
            0000111111111111111111111111111100000000000
            0001000000000000000000000000000011110000000
            0001000000010000011111111111100010001110000
            0001000011111110000001110000000010000001100
            0001000000111000000010101000000010000000100
            0001000001010100001000100100000010000011000
            0000110010010010010000100010001100001100000
            0000001000010000000000100000010011110000000
            0000001000000000000000000000011100000000000
            0000000111111111111111111111100000000000000
            0000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000
            """;

    @EventHandler
    public void onPlayerEatCake(PlayerInteractEvent e) {
        if(!Function.isRightClicking(e)) return;
        if(e.getClickedBlock() == null) return;
        if(!e.getClickedBlock().getType().equals(Material.CAKE)) return;
        if(e.getPlayer().getScoreboardTags().contains("Cake_CD")) return;
        String[] lines = content.split("\n");
        String[] lines2 = name.split("\n");
        String[] lines3 = cup.split("\n");
        e.getPlayer().sendMessage("程序已经执行！");
        e.getPlayer().addScoreboardTag("Cake_CD");
        new BukkitRunnable(){
            @Override
            public void run() {
                e.getPlayer().removeScoreboardTag("Cake_CD");
            }
        }.runTaskLater(QinKitPVPS.getPlugin(),200);

        // 定义二维数组的尺寸
        int numRows = lines.length;
        int numCols = lines[0].length();

        int row = lines2.length;
        int col = lines2[0].length();

        int row2 = lines3.length;
        int col2 = lines3[0].length();

        // 初始化二维数组
        int[][] matrix = new int[numRows][numCols];
        int[][] array2 = new int[row][col];
        int[][] array3 = new int[row2][col2];

        // 将字符串转换成二维数组
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                matrix[i][j] = lines[i].charAt(j) - '0';
            }
        }

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                array2[i][j] = lines2[i].charAt(j) - '0';
            }
        }

        for(int i = 0; i < row2; i++) {
            for (int j =0;j<col2;j++) {
                array3[i][j] = lines3[i].charAt(j) - '0';
            }
        }

        Location loc = e.getPlayer().getLocation().clone().add(0,25,0);
        for(int k = 0; k < 100; k++) {
            int finalK = k;
            new BukkitRunnable() {
                @Override
                public void run() {
                    for(int i = 0; i < numRows; i++)
                        for(int j = 0; j < numCols; j++) {
                            if(j > ((double) numCols / 100) * finalK * 2.25) continue;
                            Location spawnLocation = loc.clone().add(j*0.35 - 50,-i*0.75 + 5,-20);
                            spawnBirthday(i, j, spawnLocation, matrix, finalK, e);

                        }
                }
            }.runTaskLater(QinKitPVPS.getPlugin(),2 * k);
        }

        for(int k = 0; k < 100; k++) {
            int finalK = k;
            new BukkitRunnable() {
                @Override
                public void run() {
                    for(int i = 0; i < row; i++)
                        for(int j = 0; j < col; j++) {
                            if(j > ((double) col / 100) * finalK * 2.5) continue;
                            Location spawnLocation = loc.clone().add(j*0.35 - 12,-i*0.75 - 8,-20);
                            spawnBirthday(i, j, spawnLocation, array2, finalK, e);

                        }
                }
            }.runTaskLater(QinKitPVPS.getPlugin(),2 * k);
        }

        for(int k = 0; k < 100; k++) {
            int finalK = k;
            new BukkitRunnable() {
                @Override
                public void run() {
                    for(int i = 0; i < row2; i++)
                        for(int j = 0; j < col2; j++) {
                            Location spawnLocation = loc.clone().add(j*0.35 - 30,-i*0.75 - 8,-20);
                            spawnBirthday(i, j, spawnLocation, array3, finalK, e);

                        }
                }
            }.runTaskLater(QinKitPVPS.getPlugin(),2 * k);
        }

        for(int k = 0; k < 100; k ++) {
            int finalK = k;
            new BukkitRunnable() {
                @Override
                public void run() {
                    Location center = loc.clone().add(0, -2, -21);
                    for (int i = 1; i <= 200; i++) {
                        if(i > finalK * 4) break;
                        double radius = 0.5;
                        double t = Math.PI * i / 100;
                        double x = 16 * Math.pow(Math.sin(t), 3);
                        double y = 13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t);

                        Location particleLocation = center.clone().add(x / radius, y / radius, 0);
                        showCircle(particleLocation, e, finalK);
                    }
                }
            }.runTaskLater(QinKitPVPS.getPlugin(),2 * k);
        }
    }

    private void showCircle(Location particleLocation, PlayerInteractEvent e, int finalK) {
        e.getPlayer().getWorld().spawnParticle(Particle.DUST,particleLocation,1,0,0,0,0,new Particle.DustOptions(Color.WHITE,3f),true);
        if(finalK > 95) e.getPlayer().getWorld().spawnParticle(Particle.CHERRY_LEAVES, particleLocation, 1, 0.0, 0.0, 0.0,0.0, null ,true);
    }

    private void spawnBirthday(int i, int j, Location spawnLocation, int[][] array2, int finalK, PlayerInteractEvent e) {
        if(array2[i][j] == 1) {
            int pianYi = 14 - i;
            if(finalK > 95) e.getPlayer().getWorld().spawnParticle(Particle.CHERRY_LEAVES, spawnLocation.clone().add(pianYi * 0.125,0,-0.1), 1, 0.0, 0.0, 0.0,0.0, null ,true);
            e.getPlayer().getWorld().spawnParticle(Particle.DUST, spawnLocation.clone().add(pianYi * 0.125,0,0), 1, 0.0, 0.0, 0.0,0.0, new Particle.DustOptions(Color.fromRGB(250,160,160),2.2f) ,true);
        }
    }
}
